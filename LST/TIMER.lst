C51 COMPILER V9.54   TIMER                                                                 10/20/2015 11:39:06 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\OBJ\TIMER.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE TIMER.C OPTIMIZE(9,SIZE) REGFILE(.\OBJ\TEST_CVRI.ORC) BROWSE NOAREGS PRI
                    -NT(.\LST\TIMER.lst) TABS(2) OBJECT(.\OBJ\TIMER.obj)

line level    source

   1          /* **********************************************************************
   2          
   3                   Copyright (c) 2002-2013 Beyond Innovation Technology Co., Ltd
   4          
   5                  All rights are reserved. Reproduction in whole or in parts is
   6              prohibited without the prior written consent of the copyright owner.
   7          
   8             ----------------------------------------------------------------------
   9              Software License Agreement
  10          
  11              The software supplied herewith by Beyond Innovation Technology Co., Ltd
  12              (the "Company") is intended and supplied to you, the Company's
  13              customer, for use solely and exclusively on BiTEK products.
  14          
  15              The software is owned by the Company and/or its supplier, and is
  16              protected under applicable copyright laws. All rights are reserved.
  17              Any use in violation of the foregoing restrictions may subject the
  18              user to criminal sanctions under applicable laws, as well as to
  19              civil liability for the breach of the terms and conditions of this
  20              license.
  21          
  22              THIS SOFTWARE IS PROVIDED IN AN "AS IS" CONDITION. NO WARRANTIES,
  23              WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED
  24              TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
  25              PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,
  26              IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR
  27              CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  28          
  29             ----------------------------------------------------------------------
  30          
  31              Module: TIMER.C
  32          
  33              Purpose: Implementation of TIMER module.
  34          
  35              Version: 0.01                                   07:27PM  2013/03/16
  36          
  37              Compiler: Keil 8051 C Compiler v9.51
  38          
  39              Reference:
  40          
  41             ----------------------------------------------------------------------
  42              Modification:
  43          
  44              v0.01 07:27PM  2013/03/16 Jeffrey Chang
  45              Reason:
  46                  1. Original.
  47              Solution:
  48          
  49             ********************************************************************** */
  50          
  51          #define _TIMER_C_
  52          
  53          /* ------------------------------------
  54              Header Files
C51 COMPILER V9.54   TIMER                                                                 10/20/2015 11:39:06 PAGE 2   

  55             ------------------------------------ */
  56          #include "bit1618c.h"
  57          #include "bitek.h"
  58          #include "mcu.h"
  59          #include "osd.h"
  60          #include "saradc.h"
  61          #include "timer.h"
  62          #include "vp.h"
  63          
  64          
  65          /* ------------------------------------
  66              Macro Definitions
  67             ------------------------------------ */
  68          
  69          /* ------------------------------------
  70              Type Definitions
  71             ------------------------------------ */
  72          
  73          
  74          /* ------------------------------------
  75              Variables Definitions
  76             ------------------------------------ */
  77          
  78          
  79          /* ------------------------------------
  80              Function Prototypes
  81             ------------------------------------ */
  82          
  83          
  84          /* -------------------------------------------------------------------
  85              Name: TIMER_Init - To initialize TIMER module.
  86              Purpose:
  87              Passed: None.
  88              Returns: None.
  89              Notes:
  90          
  91              Reference: [3]87, [3]89
  92             ------------------------------------------------------------------- */
  93          void TIMER_Init (void)
  94          {
  95   1          // [3]64, 89
  96   1          // TMODE (SFR 0x89)
  97   1          TMOD            = TMODE_SETUP;
  98   1      
  99   1          // Setup TIMER0/1/2/22 clock mode for COUNTER MODE only !
 100   1          BITEK_TxByte(BITEK_18A_TIMER_ATTR, TIMER_BASE);
 101   1      
 102   1      
 103   1          /* ::::::::::::::::::::::::::::::::::::
 104   1              TIMER0
 105   1             :::::::::::::::::::::::::::::::::::: */
 106   1          #if ((TMODE_TIMER0 == TIMER0_16BIT_TIMER)   ||  \
 107   1               (TMODE_TIMER0 == TIMER0_16BIT_COUNTER)         )
                  // Timer Mode 1 (16-bit Timer/Counter)
                  TH0 = (65535 - TIMER0_DIVIDER + 1) / 256;
                  TL0 = (65535 - TIMER0_DIVIDER + 1) % 256;
              
                  #elif ((TMODE_TIMER0 == TIMER0_8BIT_TIMER)  ||  \
                         (TMODE_TIMER0 == TIMER0_8BIT_COUNTER)        )
 114   1          // Timer Mode 2 (8-bit Auto-Reload Timer/Counter)
 115   1          TH0 = 255 - TIMER0_DIVIDER + 1;
 116   1          TL0 = 255 - TIMER0_DIVIDER + 1;
C51 COMPILER V9.54   TIMER                                                                 10/20/2015 11:39:06 PAGE 3   

 117   1          #else
                      #error TIMER.C - Invalid TMODE_TIMER0 !
                  #endif
 120   1      
 121   1          /* [3]89 Timer 0 start running */
 122   1          TR0 = TRUE;
 123   1      
 124   1          /* [3]87 Enable Timer 0 overflow interrupt */
 125   1          ET0 = TRUE;
 126   1      
 127   1      
 128   1          /* ::::::::::::::::::::::::::::::::::::
 129   1              TIMER1
 130   1             :::::::::::::::::::::::::::::::::::: */
 131   1          #if ((TMODE_TIMER1 == TIMER1_16BIT_TIMER)   ||  \
 132   1               (TMODE_TIMER1 == TIMER1_16BIT_COUNTER)         )
                  // Timer Mode 1 (16-bit Timer/Counter)
                  TH1 = (65535 - TIMER1_DIVIDER + 1) / 256;
                  TL1 = (65535 - TIMER1_DIVIDER + 1) % 256;
              
                  #elif ((TMODE_TIMER1 == TIMER1_8BIT_TIMER)  ||  \
                         (TMODE_TIMER1 == TIMER1_8BIT_COUNTER)        )
 139   1          // Timer Mode 2 (8-bit Auto-Reload Timer/Counter)
 140   1          TH1 = 255 - TIMER1_DIVIDER + 1;
 141   1          TL1 = 255 - TIMER1_DIVIDER + 1;
 142   1          #else
                      #error TIMER.C - Invalid TMODE_TIMER1 !
                  #endif
 145   1      
 146   1          /* [3]89 Timer 1 start running */
 147   1          TR1 = TRUE;
 148   1      
 149   1          /* [3]87 Enable Timer 1 overflow interrupt */
 150   1          ET1 = TRUE;
 151   1      
 152   1      
 153   1          /* ::::::::::::::::::::::::::::::::::::
 154   1              TIMER2
 155   1             :::::::::::::::::::::::::::::::::::: */
 156   1          // Timer Mode (16-bit Timer/Counter)
 157   1          TH2     = (65535 - TIMER2_DIVIDER + 1) / 256;
 158   1          TL2     = (65535 - TIMER2_DIVIDER + 1) % 256;
 159   1          RCAP2H  = (65535 - TIMER2_DIVIDER + 1) / 256;
 160   1          RCAP2L  = (65535 - TIMER2_DIVIDER + 1) % 256;
 161   1      
 162   1          /* [3]89 Timer 2 start running by T2CON in MCU_SETUP_INT() */
 163   1        //TR2 = TRUE;
 164   1      } /* TIMER_Init */
 165          
 166          
 167          /* -------------------------------------------------------------------
 168              Name: TIMER0_ISR -
 169              Purpose: Timer0 Interrupt Service Routine (ISR).
 170              Passed: None
 171              Returns: None.
 172              Notes:
 173          
 174              Reference: [2]19
 175             ------------------------------------------------------------------- */
 176          void TIMER0_ISR (void) interrupt 1
 177          {
 178   1          #if ((TMODE_TIMER0 == TIMER0_16BIT_TIMER)   ||  \
C51 COMPILER V9.54   TIMER                                                                 10/20/2015 11:39:06 PAGE 4   

 179   1               (TMODE_TIMER0 == TIMER0_16BIT_COUNTER)         )
                  // Timer Mode 1 (16-bit Timer/Counter))
                  TH0 = (65535 - TIMER0_DIVIDER + 1) / 256;
                  TL0 = (65535 - TIMER0_DIVIDER + 1) % 256;
                  #endif
 184   1      
 185   1      
 186   1          wTIMER0_TickCnt++;
 187   1          fTIMER0_Task = TRUE;
 188   1      } /* TIMER0_ISR */
 189          
 190          
 191          /* -------------------------------------------------------------------
 192              Name: TIMER1_ISR -
 193              Purpose: Timer1 Interrupt Service Routine (ISR).
 194              Passed: None
 195              Returns: None.
 196              Notes:
 197          
 198              Reference: [2]19
 199             ------------------------------------------------------------------- */
 200          void TIMER1_ISR (void) interrupt 3  using 3
 201          {
 202   1          #if ((TMODE_TIMER1 == TIMER1_16BIT_TIMER)   ||  \
 203   1               (TMODE_TIMER1 == TIMER1_16BIT_COUNTER)         )
                  // Timer Mode 1 (16-bit Timer/Counter)
                  TH1 = (65535 - TIMER1_DIVIDER + 1) / 256;
                  TL1 = (65535 - TIMER1_DIVIDER + 1) % 256;
                  #endif
 208   1      
 209   1      
 210   1          /* ....................................
 211   1             TIMER module
 212   1             .................................... */
 213   1          wTIMER1_TickCnt++;
 214   1          fTIMER1_Task = TRUE;
 215   1      
 216   1      
 217   1          /* ....................................
 218   1             bMCU_BL_Cnt
 219   1             .................................... */
 220   1          if (bMCU_BL_Cnt)
 221   1              bMCU_BL_Cnt--;
 222   1      
 223   1        /* ....................................
 224   1             bVD_STD_Cnt
 225   1             .................................... */
 226   1          if (bVD_STD_Cnt)
 227   1              bVD_STD_Cnt--;
 228   1      
 229   1          /* ....................................
 230   1             bOSD_Cnt
 231   1             .................................... */
 232   1          if (bOSD_Cnt)
 233   1              bOSD_Cnt--;
 234   1      
 235   1      
 236   1          /* ....................................
 237   1             SARADC
 238   1             .................................... */
 239   1          fSARADC_VR_Task = TRUE;
 240   1      
C51 COMPILER V9.54   TIMER                                                                 10/20/2015 11:39:06 PAGE 5   

 241   1      
 242   1      
 243   1        #ifdef NOT_JUNK
                  bTIMER_TickCnt++;
              
                  /* ....................................
                     KEY module
                     .................................... */
                  /* To scan the keypad every 16 System Ticks since
                     the debounce needs 64 ms at least                */
                  // Period = 16 Ticks
                  if ((wTIMER_TickCnt & 0x000F) == 0)
                      KEY_Scan();
                  if (wTIMER_Tick)
                      wTIMER_Tick--;
              
              
              
                  /* ....................................
                     DISPATCH module
                     .................................... */
                  if (wTIMER_BurnInTick)
                      wTIMER_BurnInTick--;
              
                  /* ....................................
                     MENU module
                     .................................... */
                  if (wMENU_Tick)
                      wMENU_Tick--;
              
              
                  /* ....................................
                     LED module
                     .................................... */
                  if (fLED_RED_Blink)
                  {
                      // Period = 128 Ticks
                      // 50% duty cycle
                      if ((wTIMER_TickCnt & 0x007F) == 0x0000)
                          LED_RED_OFF;
              
                      if ((wTIMER_TickCnt & 0x007F) == 0x0040)
                          LED_RED_ON;
                  }
              
              
                  if (fLED_GREEN_Blink)
                  {
                      // Period = 128 Ticks
                      // 50% duty cycle
                      if ((wTIMER_TickCnt & 0x007F) == 0x0010)
                          LED_GREEN_OFF;
              
                      if ((wTIMER_TickCnt & 0x007F) == 0x0050)
                          LED_GREEN_ON;
                  }
              
                  if (fLED_YELLOW_Blink)
                  {
                      // Period = 128 Ticks
                      // 50% duty cycle
                      if ((wTIMER_TickCnt & 0x007F) == 0x0020)
C51 COMPILER V9.54   TIMER                                                                 10/20/2015 11:39:06 PAGE 6   

                          LED_YELLOW_OFF;
              
                      if ((wTIMER_TickCnt & 0x007F) == 0x0060)
                          LED_YELLOW_ON;
                  }
                  #endif
 309   1      
 310   1      } /* TIMER1_ISR */
 311          
 312          
 313          /* -------------------------------------------------------------------
 314              Name: TIMER2_ISR -
 315              Purpose: Timer2 Interrupt Service Routine (ISR).
 316              Passed: None
 317              Returns: None.
 318              Notes:
 319          
 320              Reference: [2]19
 321             ------------------------------------------------------------------- */
 322          void TIMER2_ISR (void) interrupt 5
 323          {
 324   1          TF2 = 0;
 325   1        //T2CON   = SFR_T2CON;
 326   1      
 327   1        // Timer Mode: 16-bit Auto-Reload Timer/Counter
 328   1          // Nothing to do !
 329   1      
 330   1          wTIMER2_TickCnt++;
 331   1          fTIMER2_Task = TRUE;
 332   1      } /* TIMER2_ISR */
 333          
 334          
 335          
 336          #if (TIMER_DELAYMS)
              /* -------------------------------------------------------------------
                  Name: TIMER_DelayMS -
                  Purpose: To wait a moment in milli-seconds.
                  Passed:
                      wMS = 1..65530                  @ System tick = 6ms
              
                      Delay duration = 1 Tick         @ wMS = 1
                                     = 6 ms           @ wMS = 1
                      Delay duration = 10922 Ticks    @ wMS = 65530
                                     = 65532 ms       @ wMS = 65530
              
                  Returns: None.
                  Notes:
                  Reference: [2]19
                 ------------------------------------------------------------------- */
              void TIMER_DelayMS (UW16 wMS)
              {
                  TIMER_RUN   = FALSE;
              
                  wTIMER_Tick = (wMS + MS_PER_TICK - 1) / MS_PER_TICK;
              
                  TIMER_RUN   = TRUE;
              
                  while (wTIMER_Tick)        
                      ;                      
              } /* TIMER_DelayMS */
              #endif
 364          
C51 COMPILER V9.54   TIMER                                                                 10/20/2015 11:39:06 PAGE 7   

 365          
 366          /* -------------------------------------------------------------------
 367              Name:  -
 368              Purpose: .
 369              Passed: None.
 370              Returns: None.
 371              Notes:
 372             ------------------------------------------------------------------- */
 373          
 374          
 375          /* **********************************************************************
 376          
 377              Description:
 378          
 379          
 380             ********************************************************************** */
 381          
 382          /* %% End Of File %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    109    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
